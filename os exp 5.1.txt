include <iostream> #include <thread> #include <mutex> #include <semaphore.h> #include <vector> #include <chrono>

using namespace std;

class ReaderWriter { private:
int readCount; // Number of readers currently reading mutex mtx;	// Mutex for mutual exclusion
sem_t rwMutex; // Semaphore for writer exclusive access sem_t readCountMutex; // Semaphore for counting readers
public:
ReaderWriter() : readCount(0) {
// Initialize semaphores
sem_init(&rwMutex, 0, 1); // Writer mutex, initially 1 (unlocked) sem_init(&readCountMutex, 0, 1); // Read count mutex, initially 1 (unlocked)
}

// Reader operation void reader(int id) {
// Entry Section (Reader)
sem_wait(&readCountMutex); // Lock the read count section readCount++;
if (readCount == 1) {
sem_wait(&rwMutex); // If it's the first reader, lock the writer
}
sem_post(&readCountMutex); // Unlock the read count section

// Critical Section (Reading)
cout << "Reader " << id << " is reading." << endl; this_thread::sleep_for(chrono::milliseconds(100)); // Simulate reading time

// Exit Section (Reader)
sem_wait(&readCountMutex); // Lock the read count section readCount--;
if (readCount == 0) {
sem_post(&rwMutex); // If it's the last reader, unlock the writer
}
sem_post(&readCountMutex); // Unlock the read count section
}
void writer(int id) {
// Entry Section (Writer)
sem_wait(&rwMutex); // Lock the writer mutex for exclusive access to the resource

// Critical Section (Writing)
cout << "Writer " << id << " is writing." << endl; this_thread::sleep_for(chrono::milliseconds(200)); // Simulate writing time
// Exit Section (Writer)
sem_post(&rwMutex); // Unlock the writer mutex
}
~ReaderWriter() {
sem_destroy(&rwMutex); // Clean up semaphore sem_destroy(&readCountMutex); // Clean up semaphore
}
};

// Reader thread function
void readerThread(ReaderWriter& rw, int id) { while (true) {
rw.reader(id);
this_thread::sleep_for(chrono::milliseconds(50)); // Simulate wait time between reads
}
}
// Writer thread function
void writerThread(ReaderWriter& rw, int id) { while (true) {
rw.writer(id);
this_thread::sleep_for(chrono::milliseconds(150)); // Simulate wait time between writes
}
}

int main() {
ReaderWriter rw; // Create the ReaderWriter object

vector<thread> readers; vector<thread> writers;

// Create 5 reader threads and 2 writer threads for (int i = 0; i < 5; ++i) {
readers.push_back(thread(readerThread, ref(rw), i));
}

for (int i = 0; i < 2; ++i) { writers.push_back(thread(writerThread, ref(rw), i));
}

// Join all threads (this example runs indefinitely) for (auto& t : readers) {
t.join();
}
for (auto& t : writers) { t.join();
 
}

return 0;
}